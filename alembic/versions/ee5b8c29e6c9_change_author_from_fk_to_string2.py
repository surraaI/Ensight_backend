"""Change author from FK to string2

Revision ID: ee5b8c29e6c9
Revises: 81ec699e429e
Create Date: 2025-07-06 13:32:10.831779

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ee5b8c29e6c9'
down_revision: Union[str, None] = '81ec699e429e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Step 1: Add new nullable columns
    op.add_column('articles', sa.Column('written_by', sa.String(), nullable=True))
    op.add_column('articles', sa.Column('reviewed_by', sa.String(), nullable=True))

    # Step 2: Drop old FK (author â†’ users.id)
    op.drop_constraint('articles_author_fkey', 'articles', type_='foreignkey')

    # Step 3: Create FKs for new columns
    op.create_foreign_key(None, 'articles', 'users', ['reviewed_by'], ['id'])
    op.create_foreign_key(None, 'articles', 'users', ['written_by'], ['id'])

    # Step 4: OPTIONAL - If you're able to backfill written_by from existing 'author' (if it contained IDs)
    # op.execute("UPDATE articles SET written_by = author")

    # Step 5: Set `written_by` as NOT NULL only **after** you're sure no NULLs exist
    # op.alter_column('articles', 'written_by', nullable=False)



def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'articles', type_='foreignkey')
    op.drop_constraint(None, 'articles', type_='foreignkey')
    op.create_foreign_key('articles_author_fkey', 'articles', 'users', ['author'], ['id'])
    op.drop_column('articles', 'reviewed_by')
    op.drop_column('articles', 'written_by')
    # ### end Alembic commands ###
